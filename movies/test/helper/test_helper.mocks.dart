// Mocks generated by Mockito 5.0.16 from annotations
// in movies/test/helper/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;
import 'dart:ui' as _i20;

import 'package:core/domain/entities/movie.dart' as _i14;
import 'package:core/domain/entities/movie_detail.dart' as _i8;
import 'package:core/domain/entities/season_detail.dart' as _i17;
import 'package:core/domain/entities/serie.dart' as _i15;
import 'package:core/domain/entities/serie_detail.dart' as _i16;
import 'package:core/domain/repositories/movie_repository.dart' as _i10;
import 'package:core/utils/failure.dart' as _i13;
import 'package:core/utils/state_enum.dart' as _i19;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/domain/usecases/get_movie_detail.dart' as _i3;
import 'package:movies/domain/usecases/get_movie_recommendations.dart' as _i4;
import 'package:movies/domain/usecases/get_now_playing_movies.dart' as _i23;
import 'package:movies/domain/usecases/get_popular_movies.dart' as _i9;
import 'package:movies/domain/usecases/get_top_rated_movies.dart' as _i11;
import 'package:movies/domain/usecases/get_watchlist_movies.dart' as _i24;
import 'package:movies/domain/usecases/get_watchlist_status_movies.dart' as _i5;
import 'package:movies/domain/usecases/remove_movies_watchlist.dart' as _i7;
import 'package:movies/domain/usecases/save_movies_watchlist.dart' as _i6;
import 'package:movies/domain/usecases/search_movies.dart' as _i22;
import 'package:movies/presentation/provider/movie_detail_notifier.dart'
    as _i18;
import 'package:movies/presentation/provider/popular_movies_notifier.dart'
    as _i21;
import 'package:movies/presentation/provider/top_rated_movies_notifier.dart'
    as _i25;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeGetMovieDetail_1 extends _i1.Fake implements _i3.GetMovieDetail {}

class _FakeGetMovieRecommendations_2 extends _i1.Fake
    implements _i4.GetMovieRecommendations {}

class _FakeGetWatchlistStatusMovies_3 extends _i1.Fake
    implements _i5.GetWatchlistStatusMovies {}

class _FakeSaveMoviesWatchlist_4 extends _i1.Fake
    implements _i6.SaveMoviesWatchlist {}

class _FakeRemoveMoviesWatchlist_5 extends _i1.Fake
    implements _i7.RemoveMoviesWatchlist {}

class _FakeMovieDetail_6 extends _i1.Fake implements _i8.MovieDetail {}

class _FakeGetPopularMovies_7 extends _i1.Fake implements _i9.GetPopularMovies {
}

class _FakeMovieRepository_8 extends _i1.Fake implements _i10.MovieRepository {}

class _FakeGetTopRatedMovies_9 extends _i1.Fake
    implements _i11.GetTopRatedMovies {}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i10.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>
      getWatchlistMovies() => (super.noSuchMethod(
          Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>
      getNowPlayingMovies() => (super.noSuchMethod(
          Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, _i8.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i2.Either<_i13.Failure, _i8.MovieDetail>>.value(
              _FakeEither_0<_i13.Failure, _i8.MovieDetail>())) as _i12
          .Future<_i2.Either<_i13.Failure, _i8.MovieDetail>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>
      getMovieRecommendations(int? id) => (super.noSuchMethod(
          Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, String>> saveWatchlist(
          _i8.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
              returnValue: Future<_i2.Either<_i13.Failure, String>>.value(
                  _FakeEither_0<_i13.Failure, String>()))
          as _i12.Future<_i2.Either<_i13.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, String>> removeWathclist(
          _i8.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWathclist, [movie]),
              returnValue: Future<_i2.Either<_i13.Failure, String>>.value(
                  _FakeEither_0<_i13.Failure, String>()))
          as _i12.Future<_i2.Either<_i13.Failure, String>>);
  @override
  _i12.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>
      getWatchlistSeries() => (super.noSuchMethod(
          Invocation.method(#getWatchlistSeries, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i15.Serie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.Serie>>> getOnTheAirSeries() =>
      (super.noSuchMethod(Invocation.method(#getOnTheAirSeries, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i15.Serie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.Serie>>> getPopularSeries() =>
      (super.noSuchMethod(Invocation.method(#getPopularSeries, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i15.Serie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.Serie>>> getTopRatedSeries() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedSeries, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i15.Serie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, _i16.SeriesDetail>> getSeriesDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getSeriesDetail, [id]),
              returnValue:
                  Future<_i2.Either<_i13.Failure, _i16.SeriesDetail>>.value(
                      _FakeEither_0<_i13.Failure, _i16.SeriesDetail>()))
          as _i12.Future<_i2.Either<_i13.Failure, _i16.SeriesDetail>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>
      getSeriesRecommendations(int? id) => (super.noSuchMethod(
          Invocation.method(#getSeriesRecommendations, [id]),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i15.Serie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i15.Serie>>> searchSeries(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchSeries, [query]),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i15.Serie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i15.Serie>>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, String>> saveWatchlistSeries(
          _i16.SeriesDetail? series) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlistSeries, [series]),
              returnValue: Future<_i2.Either<_i13.Failure, String>>.value(
                  _FakeEither_0<_i13.Failure, String>()))
          as _i12.Future<_i2.Either<_i13.Failure, String>>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, String>> removeWathclistSeries(
          _i16.SeriesDetail? series) =>
      (super.noSuchMethod(Invocation.method(#removeWathclistSeries, [series]),
              returnValue: Future<_i2.Either<_i13.Failure, String>>.value(
                  _FakeEither_0<_i13.Failure, String>()))
          as _i12.Future<_i2.Either<_i13.Failure, String>>);
  @override
  _i12.Future<bool> isAddedToWatchlistSeries(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlistSeries, [id]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i2.Either<_i13.Failure, _i17.SeasonDetail>> getSeasonDetail(
          int? id, int? seasonNumber) =>
      (super.noSuchMethod(
              Invocation.method(#getSeasonDetail, [id, seasonNumber]),
              returnValue:
                  Future<_i2.Either<_i13.Failure, _i17.SeasonDetail>>.value(
                      _FakeEither_0<_i13.Failure, _i17.SeasonDetail>()))
          as _i12.Future<_i2.Either<_i13.Failure, _i17.SeasonDetail>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieDetailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailNotifier extends _i1.Mock
    implements _i18.MovieDetailNotifier {
  MockMovieDetailNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_1()) as _i3.GetMovieDetail);
  @override
  _i4.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_2())
          as _i4.GetMovieRecommendations);
  @override
  _i5.GetWatchlistStatusMovies get getWatchlistStatusMovies =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistStatusMovies),
              returnValue: _FakeGetWatchlistStatusMovies_3())
          as _i5.GetWatchlistStatusMovies);
  @override
  _i6.SaveMoviesWatchlist get saveMoviesWatchlist => (super.noSuchMethod(
      Invocation.getter(#saveMoviesWatchlist),
      returnValue: _FakeSaveMoviesWatchlist_4()) as _i6.SaveMoviesWatchlist);
  @override
  _i7.RemoveMoviesWatchlist get removeMoviesWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeMoviesWatchlist),
              returnValue: _FakeRemoveMoviesWatchlist_5())
          as _i7.RemoveMoviesWatchlist);
  @override
  _i8.MovieDetail get movie => (super.noSuchMethod(Invocation.getter(#movie),
      returnValue: _FakeMovieDetail_6()) as _i8.MovieDetail);
  @override
  _i19.RequestState get movieState =>
      (super.noSuchMethod(Invocation.getter(#movieState),
          returnValue: _i19.RequestState.empty) as _i19.RequestState);
  @override
  List<_i14.Movie> get movieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#movieRecommendations),
          returnValue: <_i14.Movie>[]) as List<_i14.Movie>);
  @override
  _i19.RequestState get recommendationState =>
      (super.noSuchMethod(Invocation.getter(#recommendationState),
          returnValue: _i19.RequestState.empty) as _i19.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get isAddedToWatchlist =>
      (super.noSuchMethod(Invocation.getter(#isAddedToWatchlist),
          returnValue: false) as bool);
  @override
  String get watchlistMessage =>
      (super.noSuchMethod(Invocation.getter(#watchlistMessage), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchMovieDetail(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchMovieDetail, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> addWatchlist(_i8.MovieDetail? movie) => (super.noSuchMethod(
      Invocation.method(#addWatchlist, [movie]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  _i12.Future<void> removeFromWatchlist(_i8.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlist, [movie]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i12.Future<void>);
  @override
  _i12.Future<void> loadWatchlistStatus(int? id) => (super.noSuchMethod(
      Invocation.method(#loadWatchlistStatus, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void addListener(_i20.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i20.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PopularMoviesNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesNotifier extends _i1.Mock
    implements _i21.PopularMoviesNotifier {
  MockPopularMoviesNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(Invocation.getter(#getPopularMovies),
          returnValue: _FakeGetPopularMovies_7()) as _i9.GetPopularMovies);
  @override
  _i19.RequestState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i19.RequestState.empty) as _i19.RequestState);
  @override
  List<_i14.Movie> get movies => (super.noSuchMethod(Invocation.getter(#movies),
      returnValue: <_i14.Movie>[]) as List<_i14.Movie>);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchPopularMovies() => (super.noSuchMethod(
      Invocation.method(#fetchPopularMovies, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void addListener(_i20.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i20.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i22.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetNowPlayingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingMovies extends _i1.Mock
    implements _i23.GetNowPlayingMovies {
  MockGetNowPlayingMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i9.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i11.GetTopRatedMovies {
  MockGetTopRatedMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetMovieDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetail extends _i1.Mock implements _i3.GetMovieDetail {
  MockGetMovieDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, _i8.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i2.Either<_i13.Failure, _i8.MovieDetail>>.value(
              _FakeEither_0<_i13.Failure, _i8.MovieDetail>())) as _i12
          .Future<_i2.Either<_i13.Failure, _i8.MovieDetail>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetMovieRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRecommendations extends _i1.Mock
    implements _i4.GetMovieRecommendations {
  MockGetMovieRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetWatchlistStatusMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistStatusMovies extends _i1.Mock
    implements _i5.GetWatchlistStatusMovies {
  MockGetWatchlistStatusMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetWatchlistMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistMovies extends _i1.Mock
    implements _i24.GetWatchlistMovies {
  MockGetWatchlistMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, List<_i14.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>.value(
              _FakeEither_0<_i13.Failure, List<_i14.Movie>>())) as _i12
          .Future<_i2.Either<_i13.Failure, List<_i14.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SaveMoviesWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveMoviesWatchlist extends _i1.Mock
    implements _i6.SaveMoviesWatchlist {
  MockSaveMoviesWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, String>> execute(
          _i8.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i2.Either<_i13.Failure, String>>.value(
                  _FakeEither_0<_i13.Failure, String>()))
          as _i12.Future<_i2.Either<_i13.Failure, String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RemoveMoviesWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveMoviesWatchlist extends _i1.Mock
    implements _i7.RemoveMoviesWatchlist {
  MockRemoveMoviesWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_8()) as _i10.MovieRepository);
  @override
  _i12.Future<_i2.Either<_i13.Failure, String>> execute(
          _i8.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i2.Either<_i13.Failure, String>>.value(
                  _FakeEither_0<_i13.Failure, String>()))
          as _i12.Future<_i2.Either<_i13.Failure, String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TopRatedMoviesNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedMoviesNotifier extends _i1.Mock
    implements _i25.TopRatedMoviesNotifier {
  MockTopRatedMoviesNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedMovies),
          returnValue: _FakeGetTopRatedMovies_9()) as _i11.GetTopRatedMovies);
  @override
  _i19.RequestState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i19.RequestState.empty) as _i19.RequestState);
  @override
  List<_i14.Movie> get movies => (super.noSuchMethod(Invocation.getter(#movies),
      returnValue: <_i14.Movie>[]) as List<_i14.Movie>);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i12.Future<void> fetchTopRatedMovies() => (super.noSuchMethod(
      Invocation.method(#fetchTopRatedMovies, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i12.Future<void>);
  @override
  void addListener(_i20.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i20.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
