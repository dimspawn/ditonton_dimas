// Mocks generated by Mockito 5.0.16 from annotations
// in core/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: unnecessary_overrides

import 'dart:async' as _i8;
import 'dart:io' as _i5;

import 'package:core/data/datasources/db/database_helper.dart' as _i7;
import 'package:core/data/datasources/movie_local_data_source.dart' as _i15;
import 'package:core/data/datasources/movie_remote_data_source.dart' as _i12;
import 'package:core/data/models/movie_detail_model.dart' as _i2;
import 'package:core/data/models/movie_model.dart' as _i13;
import 'package:core/data/models/movie_table.dart' as _i10;
import 'package:core/data/models/season_detail_model.dart' as _i4;
import 'package:core/data/models/serie_detail_model.dart' as _i3;
import 'package:core/data/models/serie_model.dart' as _i14;
import 'package:core/data/models/serie_table.dart' as _i11;
import 'package:core/utils/connection.dart' as _i17;
import 'package:core/utils/network_info.dart' as _i16;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite_sqlcipher/sqflite.dart' as _i9;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieDetailResponse_0 extends _i1.Fake
    implements _i2.MovieDetailResponse {}

class _FakeSeriesDetailResponse_1 extends _i1.Fake
    implements _i3.SeriesDetailResponse {}

class _FakeSeasonDetailResponse_2 extends _i1.Fake
    implements _i4.SeasonDetailResponse {}

class _FakeSecurityContext_3 extends _i1.Fake implements _i5.SecurityContext {}

class _FakeResponse_4 extends _i1.Fake implements _i6.Response {}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i7.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i9.Database?> get database => (super.noSuchMethod(
      Invocation.getter(#database),
      returnValue: Future<_i9.Database?>.value()) as _i8.Future<_i9.Database?>);
  @override
  _i8.Future<void> insertCacheTransaction(
          List<_i10.MovieTable>? movies, String? category) =>
      (super.noSuchMethod(
          Invocation.method(#insertCacheTransaction, [movies, category]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> insertCacheTransactionSeries(
          List<_i11.SeriesTable>? series, String? category) =>
      (super.noSuchMethod(
          Invocation.method(#insertCacheTransactionSeries, [series, category]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getCacheFilm(String? category) =>
      (super.noSuchMethod(Invocation.method(#getCacheFilm, [category]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);
  @override
  _i8.Future<int> clearCache(String? category) =>
      (super.noSuchMethod(Invocation.method(#clearCache, [category]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> insertWatchlist(_i10.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> insertWatchlistSeries(_i11.SeriesTable? serie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlistSeries, [serie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> removeWatchlist(_i10.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<int> removeWatchlistSeries(_i11.SeriesTable? serie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistSeries, [serie]),
          returnValue: Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<Map<String, dynamic>?> getFilmById(int? id, String? category) =>
      (super.noSuchMethod(Invocation.method(#getFilmById, [id, category]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i8.Future<Map<String, dynamic>?>);
  @override
  _i8.Future<List<Map<String, dynamic>>> getWatchlistFilm(String? category) =>
      (super.noSuchMethod(Invocation.method(#getWatchlistFilm, [category]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i8.Future<List<Map<String, dynamic>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i12.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i13.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]))
          as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<List<_i13.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]))
      as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<List<_i13.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]))
      as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<_i2.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<_i2.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse_0()))
          as _i8.Future<_i2.MovieDetailResponse>);
  @override
  _i8.Future<List<_i13.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]))
          as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<List<_i13.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<_i13.MovieModel>>.value(<_i13.MovieModel>[]))
          as _i8.Future<List<_i13.MovieModel>>);
  @override
  _i8.Future<List<_i14.SeriesModel>> getOnTheAirSeries() =>
      (super.noSuchMethod(Invocation.method(#getOnTheAirSeries, []),
              returnValue:
                  Future<List<_i14.SeriesModel>>.value(<_i14.SeriesModel>[]))
          as _i8.Future<List<_i14.SeriesModel>>);
  @override
  _i8.Future<List<_i14.SeriesModel>> getPopularSeries() =>
      (super.noSuchMethod(Invocation.method(#getPopularSeries, []),
              returnValue:
                  Future<List<_i14.SeriesModel>>.value(<_i14.SeriesModel>[]))
          as _i8.Future<List<_i14.SeriesModel>>);
  @override
  _i8.Future<List<_i14.SeriesModel>> getTopRatedSeries() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedSeries, []),
              returnValue:
                  Future<List<_i14.SeriesModel>>.value(<_i14.SeriesModel>[]))
          as _i8.Future<List<_i14.SeriesModel>>);
  @override
  _i8.Future<_i3.SeriesDetailResponse> getSeriesDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getSeriesDetail, [id]),
              returnValue: Future<_i3.SeriesDetailResponse>.value(
                  _FakeSeriesDetailResponse_1()))
          as _i8.Future<_i3.SeriesDetailResponse>);
  @override
  _i8.Future<List<_i14.SeriesModel>> getSeriesRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getSeriesRecommendations, [id]),
              returnValue:
                  Future<List<_i14.SeriesModel>>.value(<_i14.SeriesModel>[]))
          as _i8.Future<List<_i14.SeriesModel>>);
  @override
  _i8.Future<List<_i14.SeriesModel>> searchSeries(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchSeries, [query]),
              returnValue:
                  Future<List<_i14.SeriesModel>>.value(<_i14.SeriesModel>[]))
          as _i8.Future<List<_i14.SeriesModel>>);
  @override
  _i8.Future<_i4.SeasonDetailResponse> getSeasonDetail(
          int? id, int? seasonNumber) =>
      (super.noSuchMethod(
              Invocation.method(#getSeasonDetail, [id, seasonNumber]),
              returnValue: Future<_i4.SeasonDetailResponse>.value(
                  _FakeSeasonDetailResponse_2()))
          as _i8.Future<_i4.SeasonDetailResponse>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i15.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<String> insertWatchlist(_i10.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> removeWatchlist(_i10.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i10.MovieTable?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<_i10.MovieTable?>.value())
          as _i8.Future<_i10.MovieTable?>);
  @override
  _i8.Future<List<_i10.MovieTable>> getWatchlistMovies() => (super.noSuchMethod(
          Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<List<_i10.MovieTable>>.value(<_i10.MovieTable>[]))
      as _i8.Future<List<_i10.MovieTable>>);
  @override
  _i8.Future<void> cacheNowPlayingMovies(List<_i10.MovieTable>? movies) =>
      (super.noSuchMethod(Invocation.method(#cacheNowPlayingMovies, [movies]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<_i10.MovieTable>> getCachedNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getCachedNowPlayingMovies, []),
              returnValue:
                  Future<List<_i10.MovieTable>>.value(<_i10.MovieTable>[]))
          as _i8.Future<List<_i10.MovieTable>>);
  @override
  _i8.Future<String> insertWatchlistSeries(_i11.SeriesTable? serie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlistSeries, [serie]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> removeWathclistSeries(_i11.SeriesTable? serie) =>
      (super.noSuchMethod(Invocation.method(#removeWathclistSeries, [serie]),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i11.SeriesTable?> getSeriesById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getSeriesById, [id]),
              returnValue: Future<_i11.SeriesTable?>.value())
          as _i8.Future<_i11.SeriesTable?>);
  @override
  _i8.Future<List<_i11.SeriesTable>> getWatchlistSeries() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistSeries, []),
              returnValue:
                  Future<List<_i11.SeriesTable>>.value(<_i11.SeriesTable>[]))
          as _i8.Future<List<_i11.SeriesTable>>);
  @override
  _i8.Future<void> cacheOnTheAirSeries(List<_i11.SeriesTable>? series) =>
      (super.noSuchMethod(Invocation.method(#cacheOnTheAirSeries, [series]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<_i11.SeriesTable>> getCachedOnTheAirSeries() =>
      (super.noSuchMethod(Invocation.method(#getCachedOnTheAirSeries, []),
              returnValue:
                  Future<List<_i11.SeriesTable>>.value(<_i11.SeriesTable>[]))
          as _i8.Future<List<_i11.SeriesTable>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i16.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Connection].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnection extends _i1.Mock implements _i17.Connection {
  MockConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.SecurityContext> globalContext() =>
      (super.noSuchMethod(Invocation.method(#globalContext, []),
              returnValue:
                  Future<_i5.SecurityContext>.value(_FakeSecurityContext_3()))
          as _i8.Future<_i5.SecurityContext>);
  @override
  _i8.Future<_i6.Response> execUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#execUrl, [url]),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  String toString() => super.toString();
}
